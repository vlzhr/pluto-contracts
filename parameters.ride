{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


let plutoId = base58'Ajso6nTTjptu2UHLx6hfSXVtHFtRBJCkKYd5SAyj7zf5'
let plutoIdStr = "Ajso6nTTjptu2UHLx6hfSXVtHFtRBJCkKYd5SAyj7zf5"
let usdnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let usdnIdStr = "DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"
let treasuryAssets = ["DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p"]

let treasuryAddress = Address(base58'3PKFFFsiKR7rgaeoLQZj6jLsxteZigccN8h')
let poolAddress = Address(base58'3P93Kqz8PUbCudvMyjbci54WxQrtBtw4dbZ')

let Scale8 = 100000000
let Scale2 = 100
let Depth = 24 * 60

let Parameters = [
  # GROWTH FACTOR, PREMIUM, PERIOD, TEAM ALLOCATION, BUYBACK RATIO
  [100, 0, 0, 0, 10000],
  [110, 204, 4, 24, 7710],
  [120, 309, 5, 44, 8820],
  [130, 417, 6, 61, 7780],
  [140, 526, 7, 76, 6670],
  [150, 638, 8, 88, 5560],
  [160, 753, 9, 99, 4440],
  [170, 753, 9, 109, 3330],
  [180, 753, 9, 118, 2220],
  [190, 753, 9, 126, 1110],
  [200, 753, 8, 139, 0],
  [210, 753, 8, 145, 0],
  [220, 753, 7, 145, 0],
  [230, 753, 7, 151, 0],
  [240, 753, 6, 156, 0],
  [250, 753, 6, 160, 0],
  [260, 753, 5, 164, 0],
  [270, 753, 5, 168, 0],
  [280, 753, 4, 172, 0],
  [290, 753, 4, 175, 0]
]

func tryGetInteger(key: String) = {
  match getInteger(this, key) {
    case x: Int => x
    case _ => 0
  }}

func setParameter(key: String, val: Int, rememberHeight: Boolean) = {
  [
    IntegerEntry("last_" + key, val)
  ] ++ if (rememberHeight) then {[IntegerEntry((fraction(height, 1, 10, FLOOR) * 10).toString() + "_" + key, val)]} else {[]}
}

func getParameter(key: String) = {
  tryGetInteger("last_" + key)
}

func getParameterAtBlock(key: String, block: Int) = {
  # TODO: find the nearest possible block
  tryGetInteger(block.toString() + "_" + key)
}

func calculatePrice(poolAddress: Address, asset0Str: String, asset1Str: String) = {
  let a0Weight = getIntegerValue(poolAddress, "static_" + asset0Str + "_weight")
  let a1Weight = getIntegerValue(poolAddress, "static_" + asset1Str + "_weight")
  let a0Balance = getIntegerValue(poolAddress, "global_" + asset0Str + "_balance")
  let a1Balance = getIntegerValue(poolAddress, "global_" + asset1Str + "_balance")

  fraction(Scale8, a1Balance*a0Weight, a0Balance*a1Weight)
}

func calculateMarketValue() = {
  let plutoAsset = assetInfo(plutoId).value()
  let quantity = plutoAsset.quantity
  let plutoPrice = calculatePrice(poolAddress, plutoIdStr, usdnIdStr)
  fraction(quantity, plutoPrice, Scale8)
}

func calculateTreasuryValue() = {
  # func f(accum: Int, next: String) = {
  #   let balance = assetBalance(treasuryAddress, next.fromBase58String())
  #   accum + fraction(balance, calculatePrice(poolAddress, next, usdnIdStr), Scale8)
  # }
  # FOLD<10>(treasuryAssets, 0, f)
  getParameter("treasuryValue")
}

func calculateOnboardingParameters() = {
  strict growthFactor = match invoke(this, "getGrowthFactor", [false], []) {
    case in: Int => in
    case _ => throw("bad invoke")
  }

  func f1(accum: List[Int], next: List[Int]) = {if (growthFactor >= next[0]) then {next} else {accum}}
  FOLD<20>(Parameters, [], f1)
}


@Callable(i)
func setTreasuryValue(amount: Int) = {
  if (i.caller.toString() != "3P7Ro7FSbXSSBTtWR4AHxXjFjMkGireVdsv") then {throw("official script only")}
  else {
    setParameter("treasuryValue", amount, true)
  }
}


@Callable(i)
func getTreasuryValue(debug: Boolean) = {
  let parameter = calculateTreasuryValue()
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getPlutoQuantity(debug: Boolean) = {  
  let plutoAsset = assetInfo(plutoId).value()
  let parameter = plutoAsset.quantity - 100000000000000
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getMarketPrice(debug: Boolean) = {
  let parameter = calculatePrice(poolAddress, plutoIdStr, usdnIdStr)
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getMarketValue(debug: Boolean) = {
  let parameter = calculateMarketValue()
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getParentLpPrice(debug: Boolean, toPluto: Boolean) = {
  let usdnBalance = getIntegerValue(poolAddress, "global_"+usdnIdStr+"_balance")
  let usdnShare = getIntegerValue(poolAddress, "static_"+usdnIdStr+"_weight")
  let liquidity = fraction(usdnBalance, 10000, usdnShare)
  let lpTokensAmount = getIntegerValue(poolAddress, "global_poolToken_amount")
  let parameter = if (!toPluto) then {
    fraction(liquidity, Scale8, lpTokensAmount)
  } else {
    let plutoPrice = calculatePrice(poolAddress, plutoIdStr, usdnIdStr)
    fraction(fraction(liquidity, Scale8, lpTokensAmount), Scale8, plutoPrice)
  }
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getGrowthFactor(debug: Boolean) = {
  let marketValue = calculateMarketValue()
  let treasuryValue = calculateTreasuryValue()
  let parameter = max([
    fraction(marketValue, Scale2, treasuryValue),
    100
  ])
  if (debug) then { throw(parameter.toString()) } else { (setParameter("treasuryValue", calculateTreasuryValue(), true), parameter) }
}


@Callable(i)
func getTreasuryDelta(debug: Boolean) = {
  let currentDecade = fraction(height, 1, 10, FLOOR) * 10
  let li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113]
  
  func f(accum: Int, next: Int) = {
    let blockN = currentDecade - (next * 10)
    let val = getParameterAtBlock("treasuryValue", blockN)
    if (val == 0) then {accum} else {val}
  }
  let treasuryValue1 = calculateTreasuryValue()
  let treasuryValue0 = FOLD<113>(li, treasuryValue1, f)

  let parameter = max([
    fraction(treasuryValue1, 10000, treasuryValue0) - 10000,
    0
  ])
  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func getOnboardingParameters(debug: Boolean) = {
  let parametersLi = calculateOnboardingParameters()

  func f2(accum: String, next: Int) = {accum + next.toString() + ","}
  let parametersStr = FOLD<20>(parametersLi, "", f2)

  if (debug) then { throw(parametersStr) } else { ([], parametersLi) }
}


@Callable(i)
func getStakingBlockEmission(debug: Boolean) = {
  let parameter = getParameter("stakingBlockEmission")

  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func setStakingBlockEmission(val: Int) = {
  if (i.caller.toString() != "3P7Ro7FSbXSSBTtWR4AHxXjFjMkGireVdsv") then {throw("official script only")}
  else {
    setParameter("stakingBlockEmission", val, true)
  }
}


@Callable(i)
func getStakingAPY(debug: Boolean) = {
  let parameter = getParameter("stakingAPY")

  if (debug) then { throw(parameter.toString()) } else { ([], parameter) }
}


@Callable(i)
func setStakingAPY(val: Int) = {
  if (i.caller.toString() != "3P7Ro7FSbXSSBTtWR4AHxXjFjMkGireVdsv") then {throw("official script only")}
  else {
    setParameter("stakingAPY", val, true)
  }
}


@Callable(i)
func getTreasuryParameters(debug: Boolean) = {
  strict treasuryValue = match invoke(this, "getTreasuryValue", [false], []) {
    case in: Int => in.toString()
    case _ => throw("bad invoke")
  }

  strict marketValue = match invoke(this, "getMarketValue", [false], []) {
    case in: Int => in.toString()
    case _ => throw("bad invoke")
  }

  strict stakingAPY = match invoke(this, "getStakingAPY", [false], []) {
    case in: Int => in.toString()
    case _ => throw("bad invoke")
  }

  let parameter = treasuryValue+","+marketValue+","+stakingAPY

  if (debug) then { throw(parameter) } else { ([], parameter) }
}



@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

